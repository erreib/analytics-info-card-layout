// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNQiRE8SfDaBBkgMfoMhTx
// Component: Pp-b07qe4nJ
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantseMgUlmB4DT1Ao } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eMGUlmB4dT1AO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: eNQiRE8SfDaBBkgMfoMhTx/projectcss
import sty from "./PlasmicInfoCard.module.css"; // plasmic-import: Pp-b07qe4nJ/css
import Ellipse26Icon from "./icons/PlasmicIcon__Ellipse26"; // plasmic-import: z3ww7lAGz4/icon
import ClcloudSvgIconIcon from "./icons/PlasmicIcon__ClcloudSvgIcon"; // plasmic-import: Lq6_k1S2uw/icon
import Line128Icon from "./icons/PlasmicIcon__Line128"; // plasmic-import: JN4s4pXtKT/icon

export const PlasmicInfoCard__VariantProps = new Array("fullHeight");

export const PlasmicInfoCard__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInfoCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "fullHeight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fullHeight
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseMgUlmB4DT1Ao()
  });
  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"frame2276"}
        data-plasmic-override={overrides.frame2276}
        className={classNames(projectcss.all, sty.frame2276)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame2274"}
          data-plasmic-override={overrides.frame2274}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2274)}
        >
          <div
            data-plasmic-name={"frame2272"}
            data-plasmic-override={overrides.frame2272}
            className={classNames(projectcss.all, sty.frame2272)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2270"}
              data-plasmic-override={overrides.frame2270}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2270)}
            >
              <div
                data-plasmic-name={"group2276"}
                data-plasmic-override={overrides.group2276}
                className={classNames(projectcss.all, sty.group2276)}
              >
                <Ellipse26Icon
                  className={classNames(projectcss.all, sty.svg___5RcL4)}
                  role={"img"}
                />

                <ClcloudSvgIconIcon
                  className={classNames(projectcss.all, sty.svg__hGpdI)}
                  role={"img"}
                />
              </div>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame2269"}
                data-plasmic-override={overrides.frame2269}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame2269)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame2268"}
                  data-plasmic-override={overrides.frame2268}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame2268)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___63SWv
                    )}
                  >
                    {"Sophia Allon"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9RgO9
                    )}
                  >
                    {"sallon@gmail.com"}
                  </div>
                </p.Stack>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tGg1P
                  )}
                >
                  {"ClassLink Demo"}
                </div>
              </p.Stack>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2271"}
              data-plasmic-override={overrides.frame2271}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2271)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xb7Gb
                )}
              >
                {"View full user profile"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fTqAu
                )}
              >
                {"arrow-right"}
              </div>
            </p.Stack>
          </div>
          {(
            hasVariant(globalVariants, "screen", "oldMobilePhones")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Line128Icon
                className={classNames(projectcss.all, sty.svg__aU7)}
                role={"img"}
              />
            </div>
          ) : null}
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame2273"}
            data-plasmic-override={overrides.frame2273}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2273, {
              [sty.frame2273fullHeight]: hasVariant(
                $state,
                "fullHeight",
                "fullHeight"
              )
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2282"}
              data-plasmic-override={overrides.frame2282}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2282)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u0AQ8
                )}
              >
                {"Role Level:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jd9GH
                )}
              >
                {"Tenant Administrator"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2283"}
              data-plasmic-override={overrides.frame2283}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2283)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___60Igg
                )}
              >
                {"School:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pj4Lt
                )}
              >
                {"Some School Elementary"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2284"}
              data-plasmic-override={overrides.frame2284}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2284)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ltipJ
                )}
              >
                {"School:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fpaGk
                )}
              >
                {"Some School Elementary"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2285"}
              data-plasmic-override={overrides.frame2285}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2285)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g84ZT
                )}
              >
                {"School:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__llTH
                )}
              >
                {"Some School Elementary"}
              </div>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame2275"}
            data-plasmic-override={overrides.frame2275}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2275)}
          >
            {true ? (
              <p.Stack
                as={p.PlasmicLink}
                data-plasmic-name={"buttons"}
                data-plasmic-override={overrides.buttons}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.buttons,
                  {
                    [sty.buttonsfullHeight]: hasVariant(
                      $state,
                      "fullHeight",
                      "fullHeight"
                    )
                  }
                )}
                component={Link}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateFullHeight"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "uiAYcXpFD",
                              componentUuid: "Pp-b07qe4nJ",
                              argName: "vgroup"
                            },
                            () => "fullHeight"
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "uiAYcXpFD",
                              componentUuid: "Pp-b07qe4nJ",
                              argName: "operation"
                            },
                            () => 2
                          ),
                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "uiAYcXpFD",
                              componentUuid: "Pp-b07qe4nJ",
                              argName: "value"
                            },
                            () => "fullHeight"
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariant",
                            interactionUuid: "uiAYcXpFD",
                            componentUuid: "Pp-b07qe4nJ"
                          },
                          () =>
                            (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }
                              const oldValue = p.get($state, vgroup);
                              p.set($state, vgroup, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateFullHeight"] === "object" &&
                    typeof $steps["updateFullHeight"].then === "function"
                  ) {
                    $steps["updateFullHeight"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariant",
                        interactionUuid: "uiAYcXpFD",
                        componentUuid: "Pp-b07qe4nJ"
                      },
                      $steps["updateFullHeight"]
                    );
                  }
                }}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aWubr,
                    {
                      [sty.textfullHeight__aWubrW46PH]: hasVariant(
                        $state,
                        "fullHeight",
                        "fullHeight"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "fullHeight", "fullHeight")
                    ? "See Less"
                    : "See More"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wKf5A,
                    {
                      [sty.textfullHeight__wKf5Aw46PH]: hasVariant(
                        $state,
                        "fullHeight",
                        "fullHeight"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "fullHeight", "fullHeight")
                    ? "chevron-up"
                    : "chevron-down"}
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"frame2279"}
        data-plasmic-override={overrides.frame2279}
        className={classNames(projectcss.all, sty.frame2279, {
          [sty.frame2279fullHeight]: hasVariant(
            $state,
            "fullHeight",
            "fullHeight"
          )
        })}
      >
        <div
          data-plasmic-name={"frame2278"}
          data-plasmic-override={overrides.frame2278}
          className={classNames(projectcss.all, sty.frame2278, {
            [sty.frame2278fullHeight]: hasVariant(
              $state,
              "fullHeight",
              "fullHeight"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame2277"}
            data-plasmic-override={overrides.frame2277}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2277)}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"61px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"61px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/blank_project/images/vector24.svg",
                fullWidth: 61,
                fullHeight: 61,
                aspectRatio: 1
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ozquQ
              )}
            >
              {"ClassLink Analytics"}
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame2281"}
            data-plasmic-override={overrides.frame2281}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2281)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___74Pwi
              )}
            >
              {"View full app detail page"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h9Fqc
              )}
            >
              {"arrow-right"}
            </div>
          </p.Stack>
        </div>
      </div>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame2276",
    "frame2274",
    "frame2272",
    "frame2270",
    "group2276",
    "frame2269",
    "frame2268",
    "frame2271",
    "freeBox",
    "frame2273",
    "frame2282",
    "frame2283",
    "frame2284",
    "frame2285",
    "frame2275",
    "buttons",
    "frame2279",
    "frame2278",
    "frame2277",
    "img",
    "frame2281"
  ],

  frame2276: [
    "frame2276",
    "frame2274",
    "frame2272",
    "frame2270",
    "group2276",
    "frame2269",
    "frame2268",
    "frame2271",
    "freeBox",
    "frame2273",
    "frame2282",
    "frame2283",
    "frame2284",
    "frame2285",
    "frame2275",
    "buttons"
  ],

  frame2274: [
    "frame2274",
    "frame2272",
    "frame2270",
    "group2276",
    "frame2269",
    "frame2268",
    "frame2271",
    "freeBox",
    "frame2273",
    "frame2282",
    "frame2283",
    "frame2284",
    "frame2285",
    "frame2275",
    "buttons"
  ],

  frame2272: [
    "frame2272",
    "frame2270",
    "group2276",
    "frame2269",
    "frame2268",
    "frame2271"
  ],

  frame2270: ["frame2270", "group2276", "frame2269", "frame2268"],
  group2276: ["group2276"],
  frame2269: ["frame2269", "frame2268"],
  frame2268: ["frame2268"],
  frame2271: ["frame2271"],
  freeBox: ["freeBox"],
  frame2273: ["frame2273", "frame2282", "frame2283", "frame2284", "frame2285"],
  frame2282: ["frame2282"],
  frame2283: ["frame2283"],
  frame2284: ["frame2284"],
  frame2285: ["frame2285"],
  frame2275: ["frame2275", "buttons"],
  buttons: ["buttons"],
  frame2279: ["frame2279", "frame2278", "frame2277", "img", "frame2281"],
  frame2278: ["frame2278", "frame2277", "img", "frame2281"],
  frame2277: ["frame2277", "img"],
  img: ["img"],
  frame2281: ["frame2281"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInfoCard__ArgProps,
          internalVariantPropNames: PlasmicInfoCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInfoCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInfoCard";
  } else {
    func.displayName = `PlasmicInfoCard.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoCard = Object.assign(
  // Top-level PlasmicInfoCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame2276: makeNodeComponent("frame2276"),
    frame2274: makeNodeComponent("frame2274"),
    frame2272: makeNodeComponent("frame2272"),
    frame2270: makeNodeComponent("frame2270"),
    group2276: makeNodeComponent("group2276"),
    frame2269: makeNodeComponent("frame2269"),
    frame2268: makeNodeComponent("frame2268"),
    frame2271: makeNodeComponent("frame2271"),
    freeBox: makeNodeComponent("freeBox"),
    frame2273: makeNodeComponent("frame2273"),
    frame2282: makeNodeComponent("frame2282"),
    frame2283: makeNodeComponent("frame2283"),
    frame2284: makeNodeComponent("frame2284"),
    frame2285: makeNodeComponent("frame2285"),
    frame2275: makeNodeComponent("frame2275"),
    buttons: makeNodeComponent("buttons"),
    frame2279: makeNodeComponent("frame2279"),
    frame2278: makeNodeComponent("frame2278"),
    frame2277: makeNodeComponent("frame2277"),
    img: makeNodeComponent("img"),
    frame2281: makeNodeComponent("frame2281"),
    // Metadata about props expected for PlasmicInfoCard
    internalVariantProps: PlasmicInfoCard__VariantProps,
    internalArgProps: PlasmicInfoCard__ArgProps
  }
);

export default PlasmicInfoCard;
/* prettier-ignore-end */
